}, error=function(e){cat("ERROR :",conditionMessage(e), "\n")},
finally = {
tempv = c(tempm[1,2:7],tempm[2,2:7])
return(unlist(tempv))})
tryCatch({
tempm =  effect.sizes(cross = cgp,
phenotype.name = "Height",
genotype.names = c("AA","BB"),
focal.groups = nnames[x])
}, error=function(e){cat("ERROR :",conditionMessage(e), "\n")},
finally = {
tempv = c(tempm[1,2:7],tempm[2,2:7])
return(unlist(tempv), environment(parent.env))})
#effect sizes can not be computed for these 3 SNPs so we remove them from the vector
#populating a dataframe with effect size estimates
sizedf = sapply(1:length(nnames)[-188], function(x){
#effect sizes can not be computed for these 3 SNPs so we remove them from the vector
#populating a dataframe with effect size estimates
sizedf = sapply(1:length(nnames), function(x){
print(x)
tryCatch({
tempm =  effect.sizes(cross = cgp,
phenotype.name = "Height",
genotype.names = c("AA","BB"),
focal.groups = nnames[x])
}, error=function(e){cat("ERROR :",conditionMessage(e), "\n")},
finally = {
tempv = c(tempm[1,2:7],tempm[2,2:7])
return(unlist(tempv))
})
});
sizedf[1]
str(sizedf)
sizedf[,188]
sizedf[,187:189]
#combining both
scanvdf = cbind(scanvdf,t(sizedf))
nnames
which(scanv$result$loc.name %in% nnames)
#combining both
scanvdf = cbind(scanvdf[,which(scanv$result$loc.name %in% nnames)],t(sizedf))
dim(scanvdf)
#combining both
scanvdf = cbind(scanvdf[which(scanv$result$loc.name %in% nnames),],t(sizedf))
dim(scanvdf)
colnames(scanvdf) = c("SNP Name",
"Position (cM)",
"Mean LOD",
"Mean P Value",
"Variance LOD",
"Variance P Value",
"Joint LOD",
"Joint P Value",
"A Mean Est",
"A Mean Lower Bound",
"A Mean Upper Bound",
"A Standard Deviation Est",
"A Standard Deviation Lower Bound",
"A Standard Deviation Upper Bound",
"B Mean Est",
"B Mean Lower Bound",
"B Mean Upper Bound",
"B Standard Deviation Est",
"B Standard Deviation Lower Bound",
"B Standard Deviation Upper Bound")
write.csv(scanvdf, file = "MultipleStressvQTL_Height_LOD,Pvals,EffectSizes1.csv")
write_csv(scanvdf, file = "MultipleStressvQTL_Height_LOD,Pvals,EffectSizes1.csv")
write_csv(scanvdf, path = "MultipleStressvQTL_Height_LOD,Pvals,EffectSizes1.csv")
#####Scrubbing Manching Combined Stress Data#####
dat = read.csv(file = "C:/Users/twili/Documents/GITHub/Stapleton-Lab/Manching BayesNet/Manching2012PlantHT.csv")
setwd("C:/Users/twili/Desktop/GIThub/Stapleton-Lab/Manching BayesNet")
#####Scrubbing Manching Combined Stress Data#####
dat = read.csv(file = "C:/Users/twili/Documents/GITHub/Stapleton-Lab/Manching BayesNet/Manching2012PlantHT.csv")
#####Scrubbing Manching Combined Stress Data#####
dat = read.csv(file = "C:C:/Users/twili/Desktop/GIThub/Stapleton-Lab/Manching BayesNet/Manching2012PlantHT.csv")
unique(dat$Line)
#####Scrubbing Manching Combined Stress Data#####
dat = read.csv(file = "C:C:/Users/twili/Desktop/GIThub/Stapleton-Lab/Manching BayesNet/Manching2012PlantHT.csv")
#####Scrubbing Manching Combined Stress Data#####
dat = read.csv(file = "C:/Users/twili/Desktop/GIThub/Stapleton-Lab/Manching BayesNet/Manching2012PlantHT.csv")
unique(dat$Line)
?unique()
head(unique(dat$Treatment)[2])
head(unique(dat$Treatment)[3])
head(dat)
head(dat[3])
head(dat[2])
head(unique(dat$Treatment))
unique(dat$Treatment)
unique(dat$Treatment)[2] == unique(dat$Treatment)[3]
levels(dat$Treatment)[3] = levels(dat$Treatment)[2]
levels(dat$Treatment)[10] = levels(dat$Treatment)[9]
levels(dat$Treatment)[4] = levels(dat$Treatment)[8]
length(levels(dat$Treatment)) == 8
levels(dat$Treatment) = c("control","ln","lw,ln","lw,p",
"ln,p","lw,ln,p","lw","p")
levels(dat$Treatment)
#Setting up quantitative columns using treatment levels
treats = matrix(rep(0,length(dat$Treatment) * 3), ncol = 3)
head(treats)
treats
treats = t(sapply(1:length(dat$Treatment), function(x){
if(as.character(dat$Treatment[x]) == "control"){
treats[x,] = c(0,0,0)
}else if(as.character(dat$Treatment[x]) == "ln"){
treats[x,] = c(0,1,0)
}else if(as.character(dat$Treatment[x]) == "lw,ln"){
treats[x,] = c(1,1,0)
}else if(as.character(dat$Treatment[x]) == "lw,p"){
treats[x,] = c(1,0,1)
}else if(as.character(dat$Treatment[x]) == "ln,p"){
treats[x,] = c(0,1,1)
}else if(as.character(dat$Treatment[x]) == "lw,ln,p"){
treats[x,] = c(1,1,1)
}else if(as.character(dat$Treatment[x]) == "lw"){
treats[x,] = c(1,0,0)
}else if(as.character(dat$Treatment[x]) == "p"){
treats[x,] = c(0,0,1)}
}))
treats = as.data.frame(treats)
colnames(treats) = c("Low Water", "Low Nitrogen", "Pathogen")
#Now combining the ne
#Now combining the new treatment columns into the old data frame
dat1 = cbind(treats$`Low Water`, treats$`Low Nitrogen`, treats$Pathogen, dat$Line, dat$Height_in)
head(dat1)
dat1 = as.data.frame(dat1)
dat1[,4] = sapply(dat1[,4],function(x){
x = levels(dat$Line)[x]
})
head(dat1)
#give them column names
colnames(dat1) =c("Low Water", "Low Nitrogen", "Pathogen", "Line", "Height")
head(dat1)
?which()
length(unique(dat1$Line))
bad = which(dat1$Line == "Mo066" |
dat1$Line == "B73" |
dat1$Line == "Mo17 parent" |
dat1$Line == "IBMMo17" |
dat1$Line == "IBMB73")
dat2 = dat1[-bad,]
length(unique(dat2$Line))
?substr()
#then combine IMB lines with nonIBM lines of the same number
bad = which(substr(dat2$Line,1,3) == "IBM")
head(bad)
dat2 = dat2[-bad,]
length(unique(dat2$Line))
head(dat2$Line,1,3)
head(dat2$Line)
dat2$Line,1,3
substr(dat2$Line,1,3)
relevant = data.frame(matrix(rep(0,length(dat2$Line)*dim(snp)[1]), ncol = dim(snp)[1]))
#####Need to add in SNP info#####
snp = read.csv(file = "C:/Users/twili/Documents/GITHub/Stapleton-Lab/vQTL IBM and Manching/Data/IBM94markerset08seq.csv")
#####Need to add in SNP info#####
snp = read.csv(file = "C:/Users/twili/Desktop/GIThub/Stapleton-Lab/vQTL IBM and Manching/Data/IBM94markerset08seq.csv")
relevant = data.frame(matrix(rep(0,length(dat2$Line)*dim(snp)[1]), ncol = dim(snp)[1]))
head(relevant)
dat3 = sapply(dat2$Line, function(x){
substr(x,2,2) = "O"
column = which(colnames(snp) == x)
vect = data.frame(as.character(snp[,column]))
return(vect)
})
head(dat3)
colnames(dat3) = colnames()
library(beepr)
install.packages("beepr")
library(beepr)
library(beepr)
colnames(dat3) = colnames()
dim(dat3);dim(snp)
?beepr()
#####Adding back in the Trait info#####
dat3 = cbind(dat2$Height,dat2[,1:3],dat3)
dim(dat3);dim(snp)
#####Adding back in the Trait info#####
dat3 = cbind(dat2$Height,dat2[,1:3],dat3)
head(dat3)
dat3 = as.data.frame(matrix(unlist(dat3), nrow = dim(dat2)[1], byrow = TRUE))
dat3 = sapply(dat2$Line, function(x){
substr(x,2,2) = "O"
column = which(colnames(snp) == x)
vect = data.frame(as.character(snp[,column]))
return(vect)
})
colnames(dat3) = colnames()
v = c(1,2)
V
v
t(c)
t(v)
setwd("C:/Users/twili/Desktop/GIThub/StapletonLab/StressSplicing")
#setwd("C:/Users/twili/Desktop/GIThub/StapletonLab/StressSplicing")
#####Need to add in SNP info#####
snp = read.csv(file = "C:/IBM94markerset08seq.csv")
#setwd("C:/Users/twili/Desktop/GIThub/StapletonLab/StressSplicing")
#####Need to add in SNP info#####
snp = read.csv(file = "IBM94markerset08seq.csv")
relevant = data.frame(matrix(rep(0,length(dat2$Line)*dim(snp)[1]), ncol = dim(snp)[1]))
#setwd("C:/Users/twili/Desktop/GIThub/StapletonLab/StressSplicing")
dat = read.csv(file = "Plant_Height.csv")
dat
dat = dat[,-3]
dat
#setwd("C:/Users/twili/Desktop/GIThub/StapletonLab/StressSplicing")
dat = read.csv(file = "Plant_Height.csv")
head(dat)
names(dat)
dat = dat[,-4:5]
dat = dat[,-(4:5)]
names(dat)
relevant = data.frame(matrix(rep(0,length(dat$Genotype)*dim(snp)[1]), ncol = dim(snp)[1]))
relevant
dat3 = sapply(dat2$Line, function(x){
substr(x,2,2) = "O"
column = which(colnames(snp) == x)
vect = data.frame(as.character(snp[,column]))
return(vect)
})
dat2 = sapply(dat$Genotype, function(x){
substr(x,2,2) = "O"
column = which(colnames(snp) == x)
vect = data.frame(as.character(snp[,column]))
return(vect)
})
dat2 = sapply(dat$Genotype, function(x){
substr(x,2,2) = "O"
column = which(colnames(snp) == x)
vect = data.frame(as.character(snp[,column]))
return(vect)
})
dat2 = sapply(dat$Genotype, function(x){
substr(x,2,2) = "O"
column = which(colnames(snp) == x)
vect = data.frame(as.character(snp[,column]))
return(vect)
})
snp
unique(snp$markername)
snp = snp[,-(1:5)]
head(snp)
names(snp)
unique(names(snp))
length(names(snp))
length(unique(names(snp)))
relevant = data.frame(matrix(rep(0,length(dat$Genotype)*dim(snp)[1]), ncol = dim(snp)[1]))
dat2 = sapply(dat$Genotype, function(x){
substr(x,2,2) = "O"
column = which(colnames(snp) == x)
vect = data.frame(as.character(snp[,column]))
return(vect)
})
?sapply()
?apply()
names(dat)
snp = t(snp[,-(1:5)])
snp
dim(snp)
head(snp)
snp = snp[,-(1:5)]
head(snp)
#####Need to add in SNP info#####
snp = read.csv(file = "IBM94markerset08seq.csv")
snp = snp[,-(1:5)]
head(snp)
t(snp)
names(snp)
#####Need to add in SNP info#####
snp = read.csv(file = "IBM94markerset08seq.csv")
dim(snp)
snp = snp[,-(1:5)]
dim(snp)
t(snp)
dim(t(snp))
snpT = t(snp)
head(snpT[1,])
head(snpT[length(snpT,)])
head(snpT[length(snpT),])
length(snp)
length(snpT)
dim(snpT)
94*3235
length(snpT[1,])
head(snpT[3235,])
head(snpT[3234,])
head(snpT[,3235])
head(snpT[,3234])
head(snpT[,1234])
View(snpT)
snp = snp[,-(1:5)]
relevant = data.frame(matrix(rep(0,length(dat$Genotype)*dim(snp)[1]), ncol = dim(snp)[1]))
dat2 = sapply(dat$Genotype, function(x){
substr(x,2,2) = "O"
column = which(colnames(snp) == x)
vect = data.frame(as.character(snp[,column]))
return(vect)
})
dat2 = sapply(dat$Genotype, function(x){
substr(x,2,2) = "O"
column = which(colnames(snp) == x)
vect = data.frame(as.character(snp[,column]))
return(vect)
})
dim(snp)[1]
dim(relevant)
length(dat$Genotype)
dat$Genotype
dat$Genotype[1]
names(snp)
order(names(snp))
names(dat)
unique(dat$Genotype)
relevant = data.frame(matrix(rep(0,length(dat$Genotype)*dim(snp)[1]), ncol = dim(snp)[1]))
dat2 = sapply(dat$Genotype, function(x){
#substr(x,2,2) = "O"
column = which(colnames(snp) == x)
vect = data.frame(as.character(snp[,column]))
return(vect)
})
dat2 = as.data.frame(matrix(unlist(dat2), nrow = dim(dat)[1], byrow = TRUE))
colnames(dat2) = colnames()
dat2 = as.data.frame(matrix(unlist(dat2), nrow = dim(dat)[1], byrow = TRUE))
colnames(dat2) = colnames()
head(dat2)
dat2
View(dat2)
#setwd("C:/Users/twili/Desktop/GIThub/StapletonLab/StressSplicing")
dat = read.csv(file = "Plant_Height.csv")
dat = dat[,-(4:5)]
#####Need to add in SNP info#####
snp = read.csv(file = "IBM94markerset08seq.csv")
snp = snp[,-(1:5)]
relevant = data.frame(matrix(rep(0,length(dat$Genotype)*dim(snp)[1]), ncol = dim(snp)[1]))
dat2 = sapply(dat$Genotype, function(x){
#substr(x,2,2) = "O"
column = which(colnames(snp) == x)
vect = data.frame(as.character(snp[,column]))
return(vect)
})
dat2 = as.data.frame(matrix(unlist(dat2), nrow = dim(dat)[1], byrow = TRUE))
colnames(dat2) = colnames()
dat2 = sapply(dat$Genotype, function(x){
#substr(x,2,2) = "O"
column = which(colnames(snp) == x)
vect = data.frame(as.character(snp[,column]))
return(vect)
})
dat2 = as.data.frame(matrix(unlist(dat2), nrow = dim(dat)[1], byrow = TRUE))
?unlist()
?as.data.frame
#setwd("C:/Users/twili/Desktop/GIThub/StapletonLab/StressSplicing")
dat = read.csv(file = "Plant_Height.csv")
dat = dat[,-(4:5)]
#####Need to add in SNP info#####
snp = read.csv(file = "IBM94markerset08seq.csv")
names snp
names(snp)
snp = snp[,-(1:5)]
names(snp)
?apply()
relevant = data.frame(matrix(rep(0,length(dat$Genotype)*dim(snp)[1]), ncol = dim(snp)[1]))
View(relevant)
w = c(1,2,3,4,5,6)
substr(w,2,2) = "o"
w = "Stapleton"
substr(w,2,2) = "o"
w
dat = read.csv(file = "Plant_Height.csv")
dat = dat[,-(4:5)]
#####Need to add in SNP info#####
snp = read.csv(file = "IBM94markerset08seq.csv")
snp = snp[,-(1:5)]
head(Genotype)
head(dat$Genotype)
BreedType = ifelse(length(dat$Genotype>5, "Outbred", "Inbred"))
BreedType = ifelse(length(dat$Genotype>5), "Outbred", "Inbred")
names(dat)
head(BreedType)
BreedType
BreedType = ifelse(length(dat$Genotype>6), "Outbred", "Inbred")
BreedType
length("Mo001")
BreedType = ifelse(length(dat$Genotype)>6, "Outbred", "Inbred")
BreedType
length(dat$Genotype)
?scan()
head(substr(dat$Genotype, 1,1))
#setwd("C:/Users/twili/Desktop/GIThub/StapletonLab/StressSplicing")
dat = read.csv(file = "Plant_Height.csv", header = TRUE)
dat[1,]
dat = dat[-(906:939),-(4:5)]
View(dat)
dat = dat[-(909:940),-(4:5)]
View(dat)
dat = dat[-(907:938),-(4:5)]
View(dat)
#setwd("C:/Users/twili/Desktop/GIThub/StapletonLab/StressSplicing")
dat = read.csv(file = "Plant_Height.csv", header = TRUE)
dat = dat[-(907:938),-(4:5)]
View(dat)
BreedType = ifelse(substr(dat$Genotype, 1,1)="M", "Inbred", "Outbred")
BreedType = ifelse(substr(dat$Genotype, 1,1)=="M", "Inbred", "Outbred")
head(BreedType)
unique(BreedType)
dat = cbind(dat, BreedType)
View(dat)
relevant = data.frame(matrix(rep(0,length(dat$Genotype)*dim(snp)[1]), ncol = dim(snp)[1]))
#####Need to add in SNP info#####
snp = read.csv(file = "IBM94markerset08seq.csv")
snp = snp[,-(1:5)]
relevant = data.frame(matrix(rep(0,length(dat$Genotype)*dim(snp)[1]), ncol = dim(snp)[1]))
dat2 = sapply(dat$Genotype, function(x){
substr(x,2,2) = "O"
column = which(colnames(snp) == x)
vect = data.frame(as.character(snp[,column]))
return(vect)
})
head(substr(dat$Genotype) = "O")
head(substr(dat$Genotype,2,2) = "O")
substr(dat$Genotype,2,2) = "O"
head(dat$Genotype)
#setwd("C:/Users/twili/Desktop/GIThub/StapletonLab/StressSplicing")
dat = read.csv(file = "Plant_Height.csv", header = TRUE)
#take out IBMB### , NA, B73
dat = dat[-(907:938),-(4:5)]
#create Categorical Variables for PH207*Mo###
BreedType = ifelse(substr(dat$Genotype, 1,1)=="M", "Inbred", "Outbred")
dat = cbind(dat, BreedType)
head(dat$Genotype)
unique(Genotype)
unique(dat$Genotype)
View(dat)
substr(dat$Genotype[1], 2,2)
dat2 = sapply(dat$Genotype, function(x){
substr(x,2,2) = "O"
column = which(colnames(snp) == x)
vect = data.frame(as.character(snp[,column]))
return(vect)
})
w = "stapleton"
substr(-3,-1)
substr(w,-3,-1)
substr(w,-1,-3)
substrRight(w,3)
install.packages("stringr")
library("stringr")
str_sub(w, -3,-1)
relevant = data.frame(matrix(rep(0,length(dat$Genotype)*dim(snp)[1]), ncol = dim(snp)[1]))
dat2 = sapply(dat$Genotype, function(x){
#substr(x,2,2) = "O"
column = which(str_sub(colnames(snp),-3,-1) == x)
vect = data.frame(as.character(snp[,column]))
return(vect)
})
dat2 = as.data.frame(matrix(unlist(dat2), nrow = dim(dat)[1], byrow = TRUE))
colnames(dat2) = colnames()
?unlist()
dat2 = sapply(dat$Genotype, function(x){
#substr(x,2,2) = "O"
column = which(str_sub(colnames(snp),-3,-1) == x)
vect = data.frame(as.character(snp[,column]))
return(vect)
})
dim(dat)[1]
matrix(unlist(dat2)
)
unlist(dat2)
dat2
View(dat2)
relevant = data.frame(matrix(rep(0,length(dat$Genotype)*dim(snp)[1]), ncol = dim(snp)[1]))
dat2 = sapply(str_sub(dat$Genotype,-3,-1), function(x){
#substr(x,2,2) = "O"
column = which(str_sub(colnames(snp),-3,-1) == x)
vect = data.frame(as.character(snp[,column]))
return(vect)
})
View(dat2)
dat2 = as.data.frame(matrix(unlist(dat2), nrow = dim(dat)[1], byrow = TRUE))
View(dat2)
View(dat2)
colnames(dat2) = colnames()
colnames(dat2)
?as.data.frame()
?as.character()
snp[,column]
as.character(x)
as.character(1)
as.character =(12)
as.character(12)
### Combining Genomes and Mo###
library(stringr)
#setwd("C:/Users/twili/Desktop/GIThub/StapletonLab/StressSplicing")
dat = read.csv(file = "Plant_Height.csv", header = TRUE)
#take out IBMB### , NA, B73
dat = dat[-(907:938),-(4:5)]
#create Categorical Variables for PH207*Mo###
BreedType = ifelse(substr(dat$Genotype, 1,1)=="M", "Inbred", "Outbred")
#####Need to add in SNP info#####
snp = read.csv(file = "IBM94markerset08seq.csv")
snp = snp[,-(1:5)]
relevant = data.frame(matrix(rep(0,length(dat$Genotype)*dim(snp)[1]), ncol = dim(snp)[1]))
dat2 = sapply(str_sub(dat$Genotype,-3,-1), function(x){
#substr(x,2,2) = "O"
column = which(str_sub(colnames(snp),-3,-1) == x)
vect = data.frame(as.character(snp[,column]))
return(vect)
})
dat2 = as.data.frame(matrix(unlist(dat2), nrow = dim(dat)[1], byrow = TRUE))
colnames(dat2) = colnames()
?colnames
