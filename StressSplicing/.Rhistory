modeling.df[[phen.name]] <- factor(qtl::pull.pheno(cross = cross)[[phen.name]])
}
modeling.df[["placeholder"]] <- NULL
covar.form <- paste(focal.groups, collapse = "+")
if (!is.null(nuisance.groups)) {
covar.form <- paste(covar.form, "+", paste(nuisance.groups,
collapse = "+"))
}
mean.form <- paste(phenotype.name, "~", covar.form)
var.form <- paste("~", covar.form)
dglm.fit <- dglm::dglm(formula = stats::formula(mean.form),
dformula = stats::formula(var.form), data = modeling.df)
mean.pred <- stats::predict(dglm.fit, se.fit = TRUE)
mean.estim <- mean.pred$fit
mean.se <- mean.pred$se.fit
sd.pred <- stats::predict(dglm.fit$dispersion.fit, se.fit = TRUE)
sd.estim <- sd.pred$fit/sd.pred$residual.scale
sd.se <- sd.pred$se.fit
indiv.prediction.tbl <- dplyr::bind_cols(stats::na.omit(modeling.df),
dplyr::data_frame(indiv.mean.estim = mean.estim, indiv.mean.lb = mean.estim -
mean.se, indiv.mean.ub = mean.estim + mean.se, indiv.sd.estim = exp(sd.estim),
indiv.sd.lb = exp(sd.estim - sd.se), indiv.sd.ub = exp(sd.estim +
sd.se)))
group.prediction.tbl <- indiv.prediction.tbl %>% dplyr::group_by_(.dots = c(focal.groups)) %>%
dplyr::summarise(group.mean.estim = mean(indiv.mean.estim),
group.mean.lb = mean(indiv.mean.lb), group.mean.ub = mean(indiv.mean.ub),
group.sd.estim = mean(indiv.sd.estim), group.sd.lb = mean(indiv.sd.lb),
group.sd.ub = mean(indiv.sd.ub))
return(group.prediction.tbl)
}
#set up a vector to run the function on
y = 1:length(scanv$result$loc.name);
#effect sizes can not be computed for these 3 SNPs so we remove them from the vector
#populating a dataframe with effect size estimates
sizedf = sapply(y, function(x){
tempm =  effect.sizes(cross = cgp,
phenotype.name = "Height",
genotype.names = c("AA","BB"),
focal.groups = scanv$result$loc.name[x])
tempv = c(tempm[1,2:7],tempm[2,2:7])
return(unlist(tempv))
});
#####Small Scale Analysis#####
cross = read.cross(format = "csv", file = "MSSample.csv");
cross = drop.nullmarkers(cross);
cgp = calc.genoprob(cross = cross);
scanv = scanonevar(cross = cgp, mean.formula = Height ~ Low.Water + Low.Nitrogen + Pathogen +  mean.QTL.add ,
var.formula =  ~ Low.Water + Low.Nitrogen + Pathogen + var.QTL.add);
#     x <- paste(substr(x,1,l-6), ".1", sep = "")
#     return(x)
#   } else if (substr(x,l-4,l) == "_loc5"){
#     x <- paste(substr(x,1,l-5), ".2", sep = "")
#     return(x)
#   } else return(x)
# })
# scanv$result$loc.name <- nnames
#effect sizes can not be computed for these 3 SNPs so we remove them from the vector
#populating a dataframe with effect size estimates
sizedf = sapply(y, function(x){
tempm =  effect.sizes(cross = cgp,
phenotype.name = "Height",
genotype.names = c("AA","BB"),
focal.groups = scanv$result$loc.name[x])
tempv = c(tempm[1,2:7],tempm[2,2:7])
return(unlist(tempv))
});
x
stats::terms.formula
x
x <- Height ~ x
x
x <- Height ~ chr141.83_loc-5
stats::terms.formula(x)
x <- Height ~ chr141.83_loc
stats::terms.formula(x)
x <- Height ~ chr141.83_loc-5
stats::terms.formula(x)
scanv$result$loc.name
which(substr(scanv$result$loc.name,1,3) == "chr")
scanv$result$loc.name[which(substr(scanv$result$loc.name,1,3) == "chr")]
nnames <-sapply(scanv$result$loc.name, function(x){
if (substr(x,1,3) == "chr"){
return(NA)
} else return(x)
})
nnames <- nnames[which(!is.na(nnames))]
nnames
#effect sizes can not be computed for these 3 SNPs so we remove them from the vector
#populating a dataframe with effect size estimates
sizedf = sapply(nnames, function(x){
tempm =  effect.sizes(cross = cgp,
phenotype.name = "Height",
genotype.names = c("AA","BB"),
focal.groups = x)
tempv = c(tempm[1,2:7],tempm[2,2:7])
return(unlist(tempv))
});
length(nnames)
#effect sizes can not be computed for these 3 SNPs so we remove them from the vector
#populating a dataframe with effect size estimates
sizedf = sapply(1:length(nnames), function(x){
print(x)
tempm =  effect.sizes(cross = cgp,
phenotype.name = "Height",
genotype.names = c("AA","BB"),
focal.groups = nnames[x])
tempv = c(tempm[1,2:7],tempm[2,2:7])
return(unlist(tempv))
});
#effect sizes can not be computed for these 3 SNPs so we remove them from the vector
#populating a dataframe with effect size estimates
sizedf = sapply(1:length(nnames)[-188], function(x){
print(x)
tempm =  effect.sizes(cross = cgp,
phenotype.name = "Height",
genotype.names = c("AA","BB"),
focal.groups = nnames[x])
tempv = c(tempm[1,2:7],tempm[2,2:7])
return(unlist(tempv))
});
?tryCatch
x = 188
tryCatch({
tempm =  effect.sizes(cross = cgp,
phenotype.name = "Height",
genotype.names = c("AA","BB"),
focal.groups = nnames[x])
}error=function(e){cat("ERROR :",conditionMessage(e), "\n")})
tryCatch({
tempm =  effect.sizes(cross = cgp,
phenotype.name = "Height",
genotype.names = c("AA","BB"),
focal.groups = nnames[x])
}, error=function(e){cat("ERROR :",conditionMessage(e), "\n")})
x = 187
tryCatch({
tempm =  effect.sizes(cross = cgp,
phenotype.name = "Height",
genotype.names = c("AA","BB"),
focal.groups = nnames[x])
}, error=function(e){cat("ERROR :",conditionMessage(e), "\n")})
tempv = c(tempm[1,2:7],tempm[2,2:7])
return(unlist(tempv))
rm(tempm)
rm(tempv)
x = 188
tryCatch({
tempm =  effect.sizes(cross = cgp,
phenotype.name = "Height",
genotype.names = c("AA","BB"),
focal.groups = nnames[x])
}, error=function(e){cat("ERROR :",conditionMessage(e), "\n")})
tempv = c(tempm[1,2:7],tempm[2,2:7])
x - 187
x = 187
tryCatch({
tempm =  effect.sizes(cross = cgp,
phenotype.name = "Height",
genotype.names = c("AA","BB"),
focal.groups = nnames[x])
}, error=function(e){cat("ERROR :",conditionMessage(e), "\n")},
finally = {
tempv = c(tempm[1,2:7],tempm[2,2:7])
return(unlist(tempv))})
tryCatch({
tempm =  effect.sizes(cross = cgp,
phenotype.name = "Height",
genotype.names = c("AA","BB"),
focal.groups = nnames[x])
}, error=function(e){cat("ERROR :",conditionMessage(e), "\n")},
finally = {
tempv = c(tempm[1,2:7],tempm[2,2:7])
return(unlist(tempv), environment(parent.env))})
#effect sizes can not be computed for these 3 SNPs so we remove them from the vector
#populating a dataframe with effect size estimates
sizedf = sapply(1:length(nnames)[-188], function(x){
#effect sizes can not be computed for these 3 SNPs so we remove them from the vector
#populating a dataframe with effect size estimates
sizedf = sapply(1:length(nnames), function(x){
print(x)
tryCatch({
tempm =  effect.sizes(cross = cgp,
phenotype.name = "Height",
genotype.names = c("AA","BB"),
focal.groups = nnames[x])
}, error=function(e){cat("ERROR :",conditionMessage(e), "\n")},
finally = {
tempv = c(tempm[1,2:7],tempm[2,2:7])
return(unlist(tempv))
})
});
sizedf[1]
str(sizedf)
sizedf[,188]
sizedf[,187:189]
#combining both
scanvdf = cbind(scanvdf,t(sizedf))
nnames
which(scanv$result$loc.name %in% nnames)
#combining both
scanvdf = cbind(scanvdf[,which(scanv$result$loc.name %in% nnames)],t(sizedf))
dim(scanvdf)
#combining both
scanvdf = cbind(scanvdf[which(scanv$result$loc.name %in% nnames),],t(sizedf))
dim(scanvdf)
colnames(scanvdf) = c("SNP Name",
"Position (cM)",
"Mean LOD",
"Mean P Value",
"Variance LOD",
"Variance P Value",
"Joint LOD",
"Joint P Value",
"A Mean Est",
"A Mean Lower Bound",
"A Mean Upper Bound",
"A Standard Deviation Est",
"A Standard Deviation Lower Bound",
"A Standard Deviation Upper Bound",
"B Mean Est",
"B Mean Lower Bound",
"B Mean Upper Bound",
"B Standard Deviation Est",
"B Standard Deviation Lower Bound",
"B Standard Deviation Upper Bound")
write.csv(scanvdf, file = "MultipleStressvQTL_Height_LOD,Pvals,EffectSizes1.csv")
write_csv(scanvdf, file = "MultipleStressvQTL_Height_LOD,Pvals,EffectSizes1.csv")
write_csv(scanvdf, path = "MultipleStressvQTL_Height_LOD,Pvals,EffectSizes1.csv")
#####Scrubbing Manching Combined Stress Data#####
dat = read.csv(file = "C:/Users/twili/Documents/GITHub/Stapleton-Lab/Manching BayesNet/Manching2012PlantHT.csv")
setwd("C:/Users/twili/Desktop/GIThub/Stapleton-Lab/Manching BayesNet")
#####Scrubbing Manching Combined Stress Data#####
dat = read.csv(file = "C:/Users/twili/Documents/GITHub/Stapleton-Lab/Manching BayesNet/Manching2012PlantHT.csv")
#####Scrubbing Manching Combined Stress Data#####
dat = read.csv(file = "C:C:/Users/twili/Desktop/GIThub/Stapleton-Lab/Manching BayesNet/Manching2012PlantHT.csv")
unique(dat$Line)
#####Scrubbing Manching Combined Stress Data#####
dat = read.csv(file = "C:C:/Users/twili/Desktop/GIThub/Stapleton-Lab/Manching BayesNet/Manching2012PlantHT.csv")
#####Scrubbing Manching Combined Stress Data#####
dat = read.csv(file = "C:/Users/twili/Desktop/GIThub/Stapleton-Lab/Manching BayesNet/Manching2012PlantHT.csv")
unique(dat$Line)
?unique()
head(unique(dat$Treatment)[2])
head(unique(dat$Treatment)[3])
head(dat)
head(dat[3])
head(dat[2])
head(unique(dat$Treatment))
unique(dat$Treatment)
unique(dat$Treatment)[2] == unique(dat$Treatment)[3]
levels(dat$Treatment)[3] = levels(dat$Treatment)[2]
levels(dat$Treatment)[10] = levels(dat$Treatment)[9]
levels(dat$Treatment)[4] = levels(dat$Treatment)[8]
length(levels(dat$Treatment)) == 8
levels(dat$Treatment) = c("control","ln","lw,ln","lw,p",
"ln,p","lw,ln,p","lw","p")
levels(dat$Treatment)
#Setting up quantitative columns using treatment levels
treats = matrix(rep(0,length(dat$Treatment) * 3), ncol = 3)
head(treats)
treats
treats = t(sapply(1:length(dat$Treatment), function(x){
if(as.character(dat$Treatment[x]) == "control"){
treats[x,] = c(0,0,0)
}else if(as.character(dat$Treatment[x]) == "ln"){
treats[x,] = c(0,1,0)
}else if(as.character(dat$Treatment[x]) == "lw,ln"){
treats[x,] = c(1,1,0)
}else if(as.character(dat$Treatment[x]) == "lw,p"){
treats[x,] = c(1,0,1)
}else if(as.character(dat$Treatment[x]) == "ln,p"){
treats[x,] = c(0,1,1)
}else if(as.character(dat$Treatment[x]) == "lw,ln,p"){
treats[x,] = c(1,1,1)
}else if(as.character(dat$Treatment[x]) == "lw"){
treats[x,] = c(1,0,0)
}else if(as.character(dat$Treatment[x]) == "p"){
treats[x,] = c(0,0,1)}
}))
treats = as.data.frame(treats)
colnames(treats) = c("Low Water", "Low Nitrogen", "Pathogen")
#Now combining the ne
#Now combining the new treatment columns into the old data frame
dat1 = cbind(treats$`Low Water`, treats$`Low Nitrogen`, treats$Pathogen, dat$Line, dat$Height_in)
head(dat1)
dat1 = as.data.frame(dat1)
dat1[,4] = sapply(dat1[,4],function(x){
x = levels(dat$Line)[x]
})
head(dat1)
#give them column names
colnames(dat1) =c("Low Water", "Low Nitrogen", "Pathogen", "Line", "Height")
head(dat1)
?which()
length(unique(dat1$Line))
bad = which(dat1$Line == "Mo066" |
dat1$Line == "B73" |
dat1$Line == "Mo17 parent" |
dat1$Line == "IBMMo17" |
dat1$Line == "IBMB73")
dat2 = dat1[-bad,]
length(unique(dat2$Line))
?substr()
#then combine IMB lines with nonIBM lines of the same number
bad = which(substr(dat2$Line,1,3) == "IBM")
head(bad)
dat2 = dat2[-bad,]
length(unique(dat2$Line))
head(dat2$Line,1,3)
head(dat2$Line)
dat2$Line,1,3
substr(dat2$Line,1,3)
relevant = data.frame(matrix(rep(0,length(dat2$Line)*dim(snp)[1]), ncol = dim(snp)[1]))
#####Need to add in SNP info#####
snp = read.csv(file = "C:/Users/twili/Documents/GITHub/Stapleton-Lab/vQTL IBM and Manching/Data/IBM94markerset08seq.csv")
#####Need to add in SNP info#####
snp = read.csv(file = "C:/Users/twili/Desktop/GIThub/Stapleton-Lab/vQTL IBM and Manching/Data/IBM94markerset08seq.csv")
relevant = data.frame(matrix(rep(0,length(dat2$Line)*dim(snp)[1]), ncol = dim(snp)[1]))
head(relevant)
dat3 = sapply(dat2$Line, function(x){
substr(x,2,2) = "O"
column = which(colnames(snp) == x)
vect = data.frame(as.character(snp[,column]))
return(vect)
})
head(dat3)
colnames(dat3) = colnames()
library(beepr)
install.packages("beepr")
library(beepr)
library(beepr)
colnames(dat3) = colnames()
dim(dat3);dim(snp)
?beepr()
#####Adding back in the Trait info#####
dat3 = cbind(dat2$Height,dat2[,1:3],dat3)
dim(dat3);dim(snp)
#####Adding back in the Trait info#####
dat3 = cbind(dat2$Height,dat2[,1:3],dat3)
head(dat3)
dat3 = as.data.frame(matrix(unlist(dat3), nrow = dim(dat2)[1], byrow = TRUE))
dat3 = sapply(dat2$Line, function(x){
substr(x,2,2) = "O"
column = which(colnames(snp) == x)
vect = data.frame(as.character(snp[,column]))
return(vect)
})
colnames(dat3) = colnames()
v = c(1,2)
V
v
t(c)
t(v)
setwd("C:/Users/twili/Desktop/GIThub/StapletonLab/StressSplicing")
#setwd("C:/Users/twili/Desktop/GIThub/StapletonLab/StressSplicing")
#####Need to add in SNP info#####
snp = read.csv(file = "C:/IBM94markerset08seq.csv")
#setwd("C:/Users/twili/Desktop/GIThub/StapletonLab/StressSplicing")
#####Need to add in SNP info#####
snp = read.csv(file = "IBM94markerset08seq.csv")
relevant = data.frame(matrix(rep(0,length(dat2$Line)*dim(snp)[1]), ncol = dim(snp)[1]))
#setwd("C:/Users/twili/Desktop/GIThub/StapletonLab/StressSplicing")
dat = read.csv(file = "Plant_Height.csv")
dat
dat = dat[,-3]
dat
#setwd("C:/Users/twili/Desktop/GIThub/StapletonLab/StressSplicing")
dat = read.csv(file = "Plant_Height.csv")
head(dat)
names(dat)
dat = dat[,-4:5]
dat = dat[,-(4:5)]
names(dat)
relevant = data.frame(matrix(rep(0,length(dat$Genotype)*dim(snp)[1]), ncol = dim(snp)[1]))
relevant
dat3 = sapply(dat2$Line, function(x){
substr(x,2,2) = "O"
column = which(colnames(snp) == x)
vect = data.frame(as.character(snp[,column]))
return(vect)
})
dat2 = sapply(dat$Genotype, function(x){
substr(x,2,2) = "O"
column = which(colnames(snp) == x)
vect = data.frame(as.character(snp[,column]))
return(vect)
})
dat2 = sapply(dat$Genotype, function(x){
substr(x,2,2) = "O"
column = which(colnames(snp) == x)
vect = data.frame(as.character(snp[,column]))
return(vect)
})
dat2 = sapply(dat$Genotype, function(x){
substr(x,2,2) = "O"
column = which(colnames(snp) == x)
vect = data.frame(as.character(snp[,column]))
return(vect)
})
snp
unique(snp$markername)
snp = snp[,-(1:5)]
head(snp)
names(snp)
unique(names(snp))
length(names(snp))
length(unique(names(snp)))
relevant = data.frame(matrix(rep(0,length(dat$Genotype)*dim(snp)[1]), ncol = dim(snp)[1]))
dat2 = sapply(dat$Genotype, function(x){
substr(x,2,2) = "O"
column = which(colnames(snp) == x)
vect = data.frame(as.character(snp[,column]))
return(vect)
})
?sapply()
?apply()
names(dat)
snp = t(snp[,-(1:5)])
snp
dim(snp)
head(snp)
snp = snp[,-(1:5)]
head(snp)
#####Need to add in SNP info#####
snp = read.csv(file = "IBM94markerset08seq.csv")
snp = snp[,-(1:5)]
head(snp)
t(snp)
names(snp)
#####Need to add in SNP info#####
snp = read.csv(file = "IBM94markerset08seq.csv")
dim(snp)
snp = snp[,-(1:5)]
dim(snp)
t(snp)
dim(t(snp))
snpT = t(snp)
head(snpT[1,])
head(snpT[length(snpT,)])
head(snpT[length(snpT),])
length(snp)
length(snpT)
dim(snpT)
94*3235
length(snpT[1,])
head(snpT[3235,])
head(snpT[3234,])
head(snpT[,3235])
head(snpT[,3234])
head(snpT[,1234])
View(snpT)
snp = snp[,-(1:5)]
relevant = data.frame(matrix(rep(0,length(dat$Genotype)*dim(snp)[1]), ncol = dim(snp)[1]))
dat2 = sapply(dat$Genotype, function(x){
substr(x,2,2) = "O"
column = which(colnames(snp) == x)
vect = data.frame(as.character(snp[,column]))
return(vect)
})
dat2 = sapply(dat$Genotype, function(x){
substr(x,2,2) = "O"
column = which(colnames(snp) == x)
vect = data.frame(as.character(snp[,column]))
return(vect)
})
dim(snp)[1]
dim(relevant)
length(dat$Genotype)
dat$Genotype
dat$Genotype[1]
names(snp)
order(names(snp))
names(dat)
unique(dat$Genotype)
relevant = data.frame(matrix(rep(0,length(dat$Genotype)*dim(snp)[1]), ncol = dim(snp)[1]))
dat2 = sapply(dat$Genotype, function(x){
#substr(x,2,2) = "O"
column = which(colnames(snp) == x)
vect = data.frame(as.character(snp[,column]))
return(vect)
})
dat2 = as.data.frame(matrix(unlist(dat2), nrow = dim(dat)[1], byrow = TRUE))
colnames(dat2) = colnames()
dat2 = as.data.frame(matrix(unlist(dat2), nrow = dim(dat)[1], byrow = TRUE))
colnames(dat2) = colnames()
head(dat2)
dat2
View(dat2)
#setwd("C:/Users/twili/Desktop/GIThub/StapletonLab/StressSplicing")
dat = read.csv(file = "Plant_Height.csv")
dat = dat[,-(4:5)]
#####Need to add in SNP info#####
snp = read.csv(file = "IBM94markerset08seq.csv")
snp = snp[,-(1:5)]
relevant = data.frame(matrix(rep(0,length(dat$Genotype)*dim(snp)[1]), ncol = dim(snp)[1]))
dat2 = sapply(dat$Genotype, function(x){
#substr(x,2,2) = "O"
column = which(colnames(snp) == x)
vect = data.frame(as.character(snp[,column]))
return(vect)
})
dat2 = as.data.frame(matrix(unlist(dat2), nrow = dim(dat)[1], byrow = TRUE))
colnames(dat2) = colnames()
dat2 = sapply(dat$Genotype, function(x){
#substr(x,2,2) = "O"
column = which(colnames(snp) == x)
vect = data.frame(as.character(snp[,column]))
return(vect)
})
dat2 = as.data.frame(matrix(unlist(dat2), nrow = dim(dat)[1], byrow = TRUE))
?unlist()
?as.data.frame
